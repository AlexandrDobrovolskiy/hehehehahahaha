const { Telegraf } = require('telegraf');
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = '7764741139:AAFkZc2knTG09b9L8fE0n1vQFV18LrEv-4s'; // –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
const API_URL = 'https://toncenter.com/api/v2/getTransactions';
const API_KEY = '37545bf70228deb89f50340e2f362d41f61ec3b2e46c17c9ff2cf21f23dde56c'; // API-–∫–ª—é—á Toncenter
const TONAPI_URL = 'https://tonapi.io/v2/events/'; // API Tonapi –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ö—ç—à—É
const ADDRESS = 'EQCD9h3nwvP4vZYL0nx2bhlEnRaxRCjaOwKMiDwymBpZWSKi'; // –ê–¥—Ä–µ—Å –ø—É–ª–∞ –∏–ª–∏ –∫–æ—à–µ–ª—å–∫–∞

const bot = new Telegraf(BOT_TOKEN);
let processedLTs = new Set(); // –•—Ä–∞–Ω–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ LT

const sleep = (n) => new Promise(resolve => setTimeout(resolve, n * 1000));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function getTransactions(address, limit = 20) {
    try {
        await sleep(1);

        const response = await axios.get(API_URL, {
            params: {
                address: address,
                limit: limit,
                api_key: API_KEY,
            },
        });
        return response.data.result;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.response?.data || error.message);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ö—ç—à—É —á–µ—Ä–µ–∑ Tonapi
async function getTransactionDetails(hash) {
    try {
        const response = await axios.get(`${TONAPI_URL}${hash}`);
        console.log(`‚úÖ JSON-–æ—Ç–≤–µ—Ç –æ—Ç Tonapi –¥–ª—è —Ö—ç—à–∞ ${hash}:`, response.data);
        const action = (response.data.actions || []).find(({ type }) => type === 'JettonSwap');

        if (!action) {
            throw "Action now found";
        }

        const swap = action["JettonSwap"];

        const { symbol, decimals } = swap["jetton_master_out"];

        const value = swap.amount_out * Math.pow(10, -1 * decimals);

        if (symbol === 'pTON' || symbol === 'TON') {
            return { type: 'sell', value, data: response.data };
        } else if (symbol === 'PX') {
            return { type: 'buy', value, data: response.data };
        } else {
            throw `Unknown symbol ${symbol}`;
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${hash}:`, error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ Swap Tokens
function filterSwaps(transactions) {
    const swaps = [];
    transactions.forEach((tx) => {
        const inMsg = tx.in_msg || {};
        const outMsgs = tx.out_msgs || [];

        if (tx.description && tx.description.includes('Called Contract')) {
            return;
        }

        const inValue = inMsg.value ? parseInt(inMsg.value) / 1e9 : null;

        outMsgs.forEach((outMsg) => {
            const outValue = outMsg.value ? parseInt(outMsg.value) / 1e9 : null;
            if (inValue && outValue) {
                swaps.push({
                    from: `${inValue} TON`,
                    to: `${outValue} TON`,
                    transaction_id: tx.transaction_id.hash,
                    lt: tx.transaction_id.lt, // Logical Time –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                });
            }
        });
    });
    return swaps;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function sendNewTransactions(ctx) {
    try {
        const transactions = await getTransactions(ADDRESS, 50);
        const swaps = filterSwaps(transactions);
        const newSwaps = swaps.filter((swap) => !processedLTs.has(swap.lt));

        if (newSwaps.length > 0) {
            for (const swap of newSwaps) {
                console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: ${swap.transaction_id}`);

                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ö—ç—à—É
                const { type, value, data: eventData } = await getTransactionDetails(swap.transaction_id);

                if (eventData) {
                    const message = `üíÖüíÖüíÖüíÖ–î–µ–≤–∞—á–±–∫–∏ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—èüíÖüíÖüíÖüíÖ
${type === 'buy' ? '‚úÖüìà‚úÖ–ö–£–ü–õ–ï–ù–û' : '‚ùåüìâ‚ùå–ü–†–û–î–ê–ù–û'}: ${value.toFixed(2)}PX 

üíÖüíÖüíÖüë®‚Äç‚ù§Ô∏è‚Äçüë®üíÖüíÖüíÖ
`;

                    await ctx.replyWithMarkdown(message);
                } else {
                    console.log(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${swap.transaction_id}`);
                }

                processedLTs.add(swap.lt);
            }
        } else {
            console.log('üöÄ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–≤–æ–ø–æ–≤.');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
    ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Swap Tokens –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!');
    setInterval(() => sendNewTransactions(ctx), 10000);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!');
